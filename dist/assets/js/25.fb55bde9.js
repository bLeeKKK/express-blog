(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{300:function(v,l,o){"use strict";o.r(l);var i=o(13),t=Object(i.a)({},(function(){var v=this,l=v._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"面试题"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[v._v("#")]),v._v(" 面试题")]),v._v(" "),l("ol",[l("li",[v._v("说一说cookie sessionStorage localStorage 区别？")])]),v._v(" "),l("blockquote",[l("p",[v._v("数据存储位置、生命周期、存储大小、写入方式、数据共享、发送请求时是否携带、应用场景")])]),v._v(" "),l("ul",[l("li",[v._v("共同点：都是存储在浏览器本地的")]),v._v(" "),l("li",[v._v("不同点：\n"),l("ul",[l("li",[v._v("cookie 是由"),l("strong",[v._v("服务器端写入")]),v._v("的，而SessionStorage、 LocalStorage都是由"),l("strong",[v._v("前端写入")]),v._v("的，cookie的生命周期是由服务器端在写入的时候就设置好的，LocalStorage是写入就一直存在，除非手动清除，SessionStorage是页面关闭的时候就会自动清除。")]),v._v(" "),l("li",[v._v("cookie的存储空间比较小大概4KB，SessionStorage、 LocalStorage存储空间比较大，大概5M。")]),v._v(" "),l("li",[v._v("Cookie、SessionStorage、 LocalStorage数据共享都遵循同源原则，SessionStorage还限制必须是同一个页面。")]),v._v(" "),l("li",[v._v("在前端给后端发送请求的时候会自动携带Cookie中的数据，但是SessionStorage、 LocalStorage不会")])])]),v._v(" "),l("li",[v._v("加分项：Cookie一般用于存储登录验证信息SessionID或者token，LocalStorage常用于存储不易变动的数据，减轻服务器的压力，SessionStorage可以用来检测用户是否是刷新进入页面")])]),v._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[v._v("JS数据类型有哪些,区别是什么？")])]),v._v(" "),l("ul",[l("li",[v._v("数据类型\n"),l("ul",[l("li",[v._v("基本数据类型\n"),l("ul",[l("li",[v._v("Number、String、Boolean、Undefind、Null、Object")]),v._v(" "),l("li",[v._v("BinInt、Symbol")])])]),v._v(" "),l("li",[v._v("复杂数据类型\n"),l("ul",[l("li",[v._v("Object")]),v._v(" "),l("li",[v._v("普通对象，数组，正则，日期，Math数学函数都属于Object")])])])])]),v._v(" "),l("li",[v._v("基础数据类型和复杂数据类型在内存中的存储方式不同\n"),l("ul",[l("li",[v._v("基本数据类型\n"),l("ul",[l("li",[v._v("是直接存储在栈中的简单数据段，占据空间小，属于被频繁使用的数据。")])])]),v._v(" "),l("li",[v._v("引用数据类型\n"),l("ul",[l("li",[v._v("是存储在堆内存中，占据空间大。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址，当解释器寻找引用值时，会检索其在栈中的地址，取得地址后从堆中获得实体。")])])])])]),v._v(" "),l("li",[v._v("加分回答\n"),l("ul",[l("li",[v._v("Symbol是ES6新出的一种数据类型，这种数据类型的特点就是没有重复的数据，可以作为object的key")])])])]),v._v(" "),l("ol",{attrs:{start:"3"}},[l("li",[v._v("react中调用setstate后发生了什么？")])]),v._v(" "),l("ul",[l("li",[v._v("React会将当前传入的参数对象与组件当前的状态合并,然后触发调和过程,在调和的过程中,React会以相对高效的方式根据新的状态构建React元素树并且重新渲染整个UI界面.")]),v._v(" "),l("li",[v._v("React得到的元素树之后,React会自动计算出新的树与老的树的节点的差异,然后根据差异对界面进行最小化的渲染,在React的差异算法中,React能够精确的知道在哪些位置发生看改变以及应该如何去改变,这样就保证了UI是按需更新的而不是重新渲染整个界面.")])]),v._v(" "),l("ol",{attrs:{start:"4"}},[l("li",[v._v("BFC (Block Formatting Contexts块级格式化上下文)")])]),v._v(" "),l("ul",[l("li",[v._v("它是页面中的一块渲染区域，并且有着自己的一套渲染规则，具有 BFC 特性的元素可以看作是隔离了的独立容器")]),v._v(" "),l("li",[v._v("BFC 的形成条件\n"),l("ul",[l("li",[v._v("float 的值不是none")]),v._v(" "),l("li",[v._v("position 的值不是static或者native")]),v._v(" "),l("li",[v._v("display 的值是inline-block、table-cell、flex、table-caption或着inline-flex")]),v._v(" "),l("li",[v._v("overflow 的值不是visible")])])]),v._v(" "),l("li",[v._v("常用于解决 margin 塌陷")])]),v._v(" "),l("ol",{attrs:{start:"5"}},[l("li",[v._v("px,em,rem,vh,vw,vmin,vmax的区别")])]),v._v(" "),l("ul",[l("li",[v._v("px：绝对单位，页面按精确像素展示")]),v._v(" "),l("li",[v._v("em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。")]),v._v(" "),l("li",[v._v("rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。")])]),v._v(" "),l("blockquote",[l("p",[v._v("另外需注意chrome强制最小字体为12号，即使设置成 10px 最终都会显示成 12px，当把html的font-size设置成10px,子节点rem的计算还是以12px为基准，所以网上很多文章提到的将html的font-size设为10方便计算不是那么可取)")])]),v._v(" "),l("ul",[l("li",[v._v("vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。")]),v._v(" "),l("li",[v._v("vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。")]),v._v(" "),l("li",[v._v("vmin：vw和vh中较小的那个。")]),v._v(" "),l("li",[v._v("vmax：vw和vh中较大的那个。")])]),v._v(" "),l("blockquote",[l("p",[v._v("vw, vh, vmin, vmax：IE9+局部支持，chrome/firefox/safari/opera支持，ios safari 8+支持，android browser4.4+支持，chrome for android39支持")])])])}),[],!1,null,null,null);l.default=t.exports}}]);